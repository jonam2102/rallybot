node('linux')
{
	
	stage('Checkout SCM')
	{
	 git branch : 'development', changelog: false, credentialsID: 'testingtools', pool: false , url : http://git.testurl.sys.com/tools/gitlab-rally-bot.git
	}

	stage('Read params file')

    {
    def props = readProperties file : 'param.properties'
    imageversion = props["gitrallybottag"]
    tillertag = props["tillertag"]
    openshifturl = props["openshifturl"]
    openshiftreleasename = props["openshiftreleasename"]
    configchange = props["configchange"] 
    }


    stage('Docker build image')
    {
      dockerTag = "quay.sys.com/test/gitrallybot:$imageversion"
      sh """
           set +x
           docker build --pull\
           --build-arg "version=${imageversion}" \
           --no-cache \t
           -t $dockerTag . 

         """

    }

    stage ('Docker push image')
    {
     withCredentials([usernamePassword(credentialsId: 'quaybotdevopscoecicd2', passwordVariable: 'pass', usernameVariable: 'un')])
     //app.push("$imageversion-dev")
     sh """
          docker login -u=$un -p=$pass https://quay.sys.com
          docker push "$dockerTage"
        """
    }

    stage ('Docker delete image')
    {
     sh "docker rmi $dockerTag"
    }


}

  stage('Deploy openshift image')
  {
    withCredentials([string(credentialsId: 'Openshift_devops-jenkins-dev', variable: 'pass')])

{
	sh """
                  oc login $openshifturl --token=$pass
                  oc project $openshiftnamespace
           """

        def checkServiceaccount = sh returnStatus: true, script: "pc create serviceaccount tiller -n $openshiftnamespace
       
        if (checkServiceaccount == 0){
 
                  sh """
                      oc policy add-role-to-user edit system-serviceaccount:$openshiftnamespace:tiller -n $openshiftnamespace
                      helm init --service-account=tiller --tiller-namespace --tiller-image quay.sys.test.com/test/tiller:$tillertag --history-max 5 -- wait """
    withCredentials([string(credentialsId: 'Rally_cred', variable: 'rally_api_token')]){
             sh "helm upgrade --install --tiller-namespace $openshiftnamespace --namespace -$openshiftnamespace $openshiftreleasename ./gitlab-rallybot/ --set rally_api_token=$rally_api_token --wait"

}

}

else {
        sh "helm init --service-account=tiller --tiller-namespace --tiller-image quay.sys.test.com/test/tiller:$tillertag --history-max 5 -- wait "

   withCredentials([string(credentialsId: 'Rally_cred', variable: 'rally_api_token')]){
            sh "helm upgrade --install --tiller-namespace $openshiftnamespace --namespace $openshiftnamespace $openshiftreleasename ./gitlab-rally-bot/ --set rally_api_token=$rally_api_token --wait"
}
}

  }
}
